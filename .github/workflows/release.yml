name: Release

on:
  push:
    branches: [main]

jobs:
  release:
    name: Automated Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'bump:') }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install commitizen

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if release is needed
        id: check_release
        run: |
          if cz check --rev-range HEAD~1..HEAD; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          cz bump --yes
          
      - name: Push changes
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          git push origin main --tags

      - name: Get version
        if: steps.check_release.outputs.release_needed == 'true'
        id: get_version
        run: |
          VERSION=$(cz version --project)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          python -m pip install build
          python -m build

      - name: Create GitHub Release
        if: steps.check_release.outputs.release_needed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Changes
            
            $(cz changelog --dry-run --incremental)
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: steps.check_release.outputs.release_needed == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: ageing_analysis-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/x-wheel+zip

      - name: Publish to PyPI
        if: steps.check_release.outputs.release_needed == 'true' && github.repository == 'your-org/AgeingAnalysis'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          python -m twine upload dist/* 